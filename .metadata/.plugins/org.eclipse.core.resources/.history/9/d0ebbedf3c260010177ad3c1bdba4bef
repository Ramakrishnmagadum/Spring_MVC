package com.practice.Configuration;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.support.ResourceBundleMessageSource;
import org.springframework.format.FormatterRegistry;
import org.springframework.validation.Validator;
import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import org.springframework.web.servlet.view.InternalResourceViewResolver;

import com.practice.Converter.CreditCardConverter;
import com.practice.formatter.CreditCardformatter;

@Configuration
@EnableWebMvc
@ComponentScan(basePackages = "com.practice.controller")
public class ControllerMapping  implements WebMvcConfigurer{

	@Bean
	public InternalResourceViewResolver getresolver() {
		InternalResourceViewResolver resolver = new InternalResourceViewResolver();
		resolver.setPrefix("/WEB-INF/view/");
		resolver.setSuffix(".jsp");
		return resolver;
	}
	
	
//	In this We can register Both Formatter and Converter classess...
	public void addFormatters(FormatterRegistry registry) {
//		Registering the Formatter
//		registry.addFormatter(new CreditCardformatter());
		
//		Registering the Conveter	
		registry.addConverter(new CreditCardConverter());
		
	}
	
	

	
//	---------------  This Code For getiing Dynamic Message from .properties File  ---------------
	
//	1st Step :- provide the filename to ResourceBundleMessageSource object
	 @Bean
	public ResourceBundleMessageSource messageresource() {
		ResourceBundleMessageSource source =new ResourceBundleMessageSource();
//		this is filename will config ---> no need to mention the package name bcz --> by default it should be present inside java/main/resources  
		source.setBasename("MessageResourceBundle");
		return source;
	}
	 
//	 2nd Step :- 
	 @Bean
	 public LocalValidatorFactoryBean validator() {
		 LocalValidatorFactoryBean bean=new LocalValidatorFactoryBean();
//		 above omethod will pass here 
		 bean.setValidationMessageSource(messageresource());
		return bean;
	 }
	 
//	 3rd Step:- this is link/call while starting the server and register the .properties related configuration 
//	 This will register ...
	 public Validator getValidator() {
		 System.out.println("loading the validator message Resource Bundle");
			return validator();
		}
	
}
